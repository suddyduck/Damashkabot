import logging
import json
import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiohttp import web

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
API_TOKEN = os.getenv("API_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ Render ‚Üí Environment
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")  # Render —Å–∞–º —Å–æ–∑–¥–∞—ë—Ç —ç—Ç–æ—Ç URL
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

DATA_FILE = "data.json"

# --- –õ–û–ì–ò ---
logging.basicConfig(level=logging.INFO)

# --- –î–ê–ù–ù–´–ï ---
data = {
    "password": "fish",
    "admin_password": "2202",
    "homework": "–î–ó –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ",
    "authorized_users": []
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data.update(json.load(f))


def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


# --- –°–û–ó–î–ê–ï–ú –ë–û–¢–ê ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –î–ó")],
            [KeyboardButton(text="‚úèÔ∏è –ó–∞–¥–∞—Ç—å –Ω–æ–≤–æ–µ –î–ó")]
        ],
        resize_keyboard=True
    )

def get_group_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –î–ó", callback_data="show_hw")]
        ]
    )


# --- –•–ê–ù–î–õ–ï–†–´ ---

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")


@dp.message(lambda m: m.chat.type == "private")
async def handle_private(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    if user_id in data["authorized_users"]:
        if text == "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –î–ó":
            await message.answer(f"–¢–µ–∫—É—â–µ–µ –î–ó: {data['homework']}", reply_markup=get_main_keyboard())
            return

        if text == "‚úèÔ∏è –ó–∞–¥–∞—Ç—å –Ω–æ–≤–æ–µ –î–ó":
            await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –î–ó:", reply_markup=types.ReplyKeyboardRemove())
            dp.message.register(set_homework, lambda m: m.chat.type == "private")
            return

        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º –î–ó
        data["homework"] = text
        save_data()
        await message.answer(f"–î–ó —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {data['homework']}", reply_markup=get_main_keyboard())
        return

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π ---
    if text == data["password"]:
        data["authorized_users"].append(user_id)
        save_data()
        await message.answer("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –î–ó.", reply_markup=get_main_keyboard())
        return

    if text == data["admin_password"]:
        await message.answer("–ê–¥–º–∏–Ω –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())
        dp.message.register(change_password, lambda m: m.chat.type == "private")
        return

    await message.answer("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —à–∞–ª—É–Ω–∏—à–∫–∞")


async def set_homework(message: Message):
    data["homework"] = message.text
    save_data()
    await message.answer(f"–î–ó —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {data['homework']}", reply_markup=get_main_keyboard())
    dp.message.unregister(set_homework)


async def change_password(message: Message):
    data["password"] = message.text.strip()
    save_data()
    await message.answer(f"–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {data['password']}", reply_markup=get_main_keyboard())
    dp.message.unregister(change_password)


@dp.message(lambda m: m.chat.type in ["group", "supergroup"])
async def handle_group(message: Message):
    text = message.text.lower()
    trigger_words = ["–¥–∑", "—á—Ç–æ –∑–∞–¥–∞–ª–∏", "—á—Ç–æ –∑–∞–¥–∞–≤–∞–ª–∏", "–∫–∞–∫–æ–µ –¥–∑", "—á—Ç–æ –∑–∞–¥–∞–ª–∏?"]

    if any(word in text for word in trigger_words):
        await message.reply("–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –î–ó:", reply_markup=get_group_inline_keyboard())


@dp.callback_query(F.data == "show_hw")
async def callback_show_hw(callback: CallbackQuery):
    await callback.message.reply(f"–í–æ—Ç –î–ó: {data['homework']}")
    await callback.answer()


# --- –ó–ê–ü–£–°–ö —á–µ—Ä–µ–∑ webhook ---
async def on_startup(app):
    logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {WEBHOOK_URL}")
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(app):
    logging.info("–£–¥–∞–ª—è–µ–º webhook")
    await bot.delete_webhook()


async def main():
    if not API_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN!")
        return

    app = web.Application()
    dp.setup_webhook(app, path=WEBHOOK_PATH)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    port = int(os.getenv("PORT", 10000))  # Render –¥–∞—Å—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT
    logging.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    web.run_app(app, host="0.0.0.0", port=port)


if __name__ == "__main__":
    asyncio.run(main())